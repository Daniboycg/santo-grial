# MAaaSWC System Prompt

Aplicación para generar JSONs para n8n a partir de interacción con IA.

Este proyecto es una aplicación web que permite a los usuarios interactuar con un agente IA para generar archivos JSON compatibles con n8n. El backend está outsourced y se conecta a través de webhooks. Tu objetivo es crear una aplicación Next.js utilizando tecnologías modernas para construir una plataforma confiable y escalable, con autenticación, autorización y base de datos para registro.

## Contexto del Proyecto

MultiAgent as a Service Workflow Creator es una aplicación web desarrollada con Next.js y TypeScript que permite a los usuarios interactuar con un agente IA y recibir respuestas que pueden incluir diagramas interactivos. La interfaz sigue un diseño moderno con estética neón y está altamente optimizada para la interacción con diagramas.

# Tecnologías Utilizadas

- **Next.js 14** como framework
- **TypeScript** para la seguridad de tipos
- **Tailwind CSS** para el diseño
- **Supabase** como plataforma principal para:
  - Base de datos PostgreSQL
  - Autenticación y autorización
  - Almacenamiento de archivos
- **Prisma** como ORM para la base de datos
- **Sistema de webhooks** para comunicación con el backend

# Funcionalidad Principal
## 1. Base de Datos

- Esquemas de Prisma conectados a Supabase PostgreSQL
- Migraciones gestionadas por Prisma
- Relaciones entre tablas
- Transacciones
- Tablas para usuarios y generaciones

## 2. Authentication

- Full Clerk integration
- Webhooks for user.created, user.deleted, user.updated
- Prisma integration for user data storage
- With fields:

  id Int @id @default(autoincrement())
  clerkUserId String @unique
  email String
  name String
  creditBalance Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
- clerkUserId is the primary identifier for all relationships 
## 3. Gestión de Archivos

- Integración con Supabase Storage
- Validación del tipo de archivo
- Limitaciones de tamaño de archivo
- Generación de vista previa
- Seguimiento del estado de la carga

## 4. Preparación para Sistema de Pagos (Futuro)

- Estructura de base de datos para transacciones
- Rutas API preparadas (sin implementación actual)
- UI básica para sección de pagos (desactivada)

## 5. Despliegue

- Crear un repositorio en GitHub y subir el proyecto
- Desplegar en Vercel
- Agregar variables de entorno

## Estructura del Proyecto

- **prisma**: Definiciones de esquema y migraciones
- **src/app**: Configuración principal de Next.js y rutas de la aplicación
- **src/components**: Componentes React organizados por características
  - **ui**: Componentes de interfaz reutilizables (incluyendo MermaidRenderer)
  - **chat**: Componentes específicos de la funcionalidad de chat
  - **auth**: Componentes relacionados con la autenticación
- **src/lib**: Utilidades, configuraciones y helpers
  - **db**: Configuración de Prisma y utilidades de base de datos
  - **supabase**: Cliente y utils de Supabase
- **src/hooks**: Custom hooks de React para lógica reutilizable
- **src/services**: Servicios para comunicación con APIs externas y procesamiento

> tree -I "node_modules|.git|.next|.turbo|dist|build|coverage" -a
.
├── .cursorrules
├── .env
├── .env.example
├── .eslintrc.json
├── .gitignore
├── README.md
├── instructions
│   └── clerk_docs.md
├── next-env.d.ts
├── next.config.js
├── package-lock.json
├── package.json
├── postcss.config.js
├── prisma
│   ├── migrations
│   │   ├── 20250316151035_init
│   │   │   └── migration.sql
│   │   ├── 20250317005858_migrate_to_clerk
│   │   │   └── migration.sql
│   │   ├── 20250317010148_add_clerk_user_id
│   │   │   └── migration.sql
│   │   └── migration_lock.toml
│   └── schema.prisma
├── public
│   ├── next.svg
│   └── vercel.svg
├── src
│   ├── app
│   │   ├── api
│   │   │   ├── auth
│   │   │   │   ├── status
│   │   │   │   │   └── route.ts
│   │   │   │   └── sync
│   │   │   │       └── route.ts
│   │   │   ├── users
│   │   │   │   └── me
│   │   │   │       └── route.ts
│   │   │   ├── webhook
│   │   │   │   └── generation-callback
│   │   │   │       └── route.ts
│   │   │   └── webhooks
│   │   │       └── clerk
│   │   │           └── route.ts
│   │   ├── chat
│   │   │   └── page.tsx
│   │   ├── favicon.ico
│   │   ├── globals.css
│   │   ├── layout.tsx
│   │   ├── login
│   │   │   └── page.tsx
│   │   ├── page.tsx
│   │   ├── sign-in
│   │   │   └── [[...sign-in]]
│   │   │       └── page.tsx
│   │   └── sign-up
│   │       └── [[...sign-up]]
│   │           └── page.tsx
│   ├── components
│   │   ├── auth
│   │   │   └── AuthForm.tsx
│   │   ├── chat
│   │   │   └── ChatWindow.tsx
│   │   └── ui
│   │       └── MermaidRenderer.tsx
│   ├── hooks
│   │   └── useAgent.ts
│   ├── lib
│   │   ├── clerk
│   │   │   └── utils.ts
│   │   ├── db
│   │   │   └── index.ts
│   │   └── supabase
│   │       ├── auth.ts
│   │       ├── index.ts
│   │       └── migrations
│   │           ├── create_users_table.sql
│   │           └── run_migrations.ts
│   ├── middleware.ts
│   └── services
│       ├── agentService.ts
│       └── apiService.ts
├── tailwind.config.ts
└── tsconfig.json

37 directories, 47 files

# Próximos Pasos

## 1. Migración a Clerk para Autenticación

- Instalar Clerk: `npm install @clerk/nextjs`
- Configurar variables de entorno (NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY, CLERK_SECRET_KEY)
- Implementar middleware minimalista con clerkMiddleware
- Eliminar todos los archivos y código relacionados con Supabase Auth:
  - Limpiar /src/lib/supabase/auth.ts
  - Actualizar middleware.ts
  - Mantener solo la configuración de Supabase para la base de datos
- Actualizar el componente layout.tsx para incluir ClerkProvider

## 2. Analítica y Monitoreo con PostHog

- Instalar PostHog: `npm install posthog-js`
- Configurar proveedor de PostHog en layout.tsx
- Implementar seguimiento de eventos clave:
  - Registros de usuario
  - Inicios de sesión
  - Generaciones de JSON
  - Errores críticos
- Configurar funnel de conversión para entender el comportamiento del usuario

## 3. Sistema de Feedback con Discord

- Crear un webhook de Discord para recibir feedback
- Implementar componente de feedback en la aplicación
- Configurar notificaciones para nuevos usuarios y eventos importantes
- Crear canal dedicado para sugerencias y errores reportados

## 4. Email Transaccional con Resend

- Instalar Resend: `npm install resend`
- Crear plantillas de email para:
  - Bienvenida al registrarse
  - Confirmación de generación
  - Alertas de límite de créditos
  - Resumen semanal de actividad
- Implementar colas para envíos masivos

## 5. Desarrollo del Chat con IA

- Implementar la interfaz de chat con streaming de respuestas
- Conectar con el webhook del backend para procesar solicitudes
- Añadir soporte para visualización de diagramas Mermaid
- Implementar sistema de exportación de JSONs para n8n